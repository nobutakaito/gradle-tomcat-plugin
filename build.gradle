plugins {
    id 'base'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.0.0'
}

allprojects {
    group = 'nobutakaito'
    version = '3.0.0'
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'jacoco'
    apply from: "$rootProject.projectDir/gradle/integration-test.gradle"
    apply from: "$rootProject.projectDir/gradle/functional-test.gradle"

    java {
        def compatibilityVersion = JavaVersion.VERSION_1_8
        sourceCompatibility = compatibilityVersion
        targetCompatibility = compatibilityVersion
    }

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        testImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
            exclude group: 'org.codehaus.groovy'
        }
        testImplementation 'org.apache.commons:commons-lang3:3.3'
        testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
}

jar.enabled = false

task uberJar(type: Jar, dependsOn: subprojects.assemble) {
    description = 'Creates Uberjar.'

    subprojects.each { project ->
        from project.configurations.archives.allArtifacts.files.collect { zipTree(it) }
    }

    manifest {
        attributes 'Implementation-Title': 'Gradle Tomcat plugin',
                   'Implementation-Version': project.version.toString(),
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Built-Gradle': gradle.gradleVersion
    }
}

task sourcesJar(type: Jar) {
    description = 'Creates sources JAR.'
    archiveClassifier = 'sources'

    subprojects.each { project ->
        from project.sourceSets.main.allSource
    }
}

ext.groovyDocsDir = 'build/docs/groovydoc'

task aggregateGroovydocs(type: Groovydoc, dependsOn: subprojects.groovydoc) {
    description = 'Creates Groovydocs.'

    ext.title = "Gradle Tomcat plugin ($version)"
    docTitle title
    windowTitle title
    source subprojects.groovydoc.source
    destinationDir file(groovyDocsDir)
    classpath = files(subprojects.groovydoc.classpath)
    groovyClasspath = project(':plugin').groovydoc.groovyClasspath
}

task groovydocJar(type: Jar, dependsOn: aggregateGroovydocs) {
    description = 'Creates GroovyDocs JAR.'
    archiveClassifier = 'javadoc'

    from groovyDocsDir
}

task createAllDeliverables(dependsOn: [uberJar, sourcesJar, groovydocJar]) {
    description = 'Creates all deliverables including plugin JAR, sources JAR and Groovydoc JAR.'
}

task aggregateTestReports(type: TestReport) {
    destinationDirectory = layout.buildDirectory.file("reports/all-tests").get().asFile
    testResults.from(subprojects*.test, subprojects*.integrationTest)
}

check.dependsOn aggregateTestReports

artifacts {
    archives uberJar
    archives sourcesJar
    archives groovydocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact uberJar
        }
    }
}

gradlePlugin {
    website = "https://github.com/nobutakaito/gradle-tomcat-plugin"
    vcsUrl = "https://github.com/nobutakaito/gradle-tomcat-plugin"

    mavenCoordinates {
        groupId = project.group.toString()
        artifactId = project.name
        version = project.version.toString()
    }

    plugins {
        tomcatBasePlugin {
            id = 'nobutakaito.tomcat-base'
            implementationClass = 'com.bmuschko.gradle.tomcat.TomcatBasePlugin'
            displayName = 'Gradle Tomcat Base Plugin'
            description = 'Plugin that provides custom task types for interacting with an embedded Tomcat web container.'
        }
        tomcatPlugin {
            id = 'nobutakaito.tomcat'
            implementationClass = 'com.bmuschko.gradle.tomcat.TomcatPlugin'
            displayName = 'Gradle Tomcat Plugin'
            description = 'Plugin that provides tasks for deploying your web application to an embedded Tomcat web container.'
        }
    }
}
